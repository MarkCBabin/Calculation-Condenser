# ------------------------------ NOTES ------------------------------ #
#
# This was built to analyze and condense the output of Gaussian
# 09 usng DFT to do an opt+freq calculation. #
#
#
# Input: python G09_Output_Condenser.py input_name output_name
# 
# Output: a text file (or .whatever you specify) formatted as follows:
# ====================================================================
# ====================================================================
#                    This section is for [input filename]
#                           Success		TRUE/FALSE
# ====================================================================
# ====================================================================
#
#  Either: error code & last optimization step number
#  OR:     energy, frequency, and normal modes calculated
#
# ------------------------------ START ------------------------------ #
import sys

inFile = sys.argv[1]
outFile = sys.argv[2]
f = open(inFile,'r')
# takes input from the user to select file from terminal and opens file
f1 = open(outFile,'a')
f1.write('===============================================================================\n===============================================================================\n   		      This section is for ')
f1.write(str(inFile))

i = 0 
j = 0
freq = []
errorlines = []
for line in f:
	if 'Step number' in line:
		steps = line
	if 'SCF Done:' in line:
		energy = line
	if ' Frequencies --' in line:
		freq.append(line)
	if 'Error termination' in line:
		j = j+1
		errorlines.append(line)
		if j == 1:
			f1.write('\n				Success:	FALSE\n')
			f1.write('===============================================================================\n===============================================================================\n\n')
			f1.write(str(errorlines[0]))
			f1.write(str(steps))
		if j > 1:
			f1.write('\n				Success:	FALSE\n')
			f1.write('===============================================================================\n===============================================================================\n\n')
			f1.write(str(errorlines[1]))
			f1.write(str(steps))
	if 'Normal termination' in line:
		i = i+1
	if i > 1:		
		f1.write('\n				Success:	TRUE\n')
		f1.write('===============================================================================\n===============================================================================\n\n')
		f1.write(str(energy))
		f1.writelines(['%s' % item for item in freq])
# opens/searches the file for a number of useful things and writes to
# the desired output accordingly, except normal modes (see below)

f = open(inFile,'r')
lines = f.readlines()
norm_modes = []
mol_size = []
motions = []
input_orientations = []
geom = []
mulliken = []
with open(inFile) as myFile:
	for num, line in enumerate(myFile, 1):
		if '  Atom  AN ' in line:
			norm_modes.append(num)
		if ' Symbolic Z-Matrix:' in line:
			mol_size.append(num)
		if ' Initialization pass' in line:
			mol_size.append(num)
		if '                          Input orientation:' in line:
			input_orientations.append(num)
		if ' Mulliken atomic charges:' in line:
			mullikenindex = num
	mol_size = mol_size[1] - mol_size[0] - 5
# this calculates, correctly, the molecule size by taking some of the 
# keywords used in the Gaussin input and subtracting their difference
# the 5 is used to account for blank spaces, etc. in the file

if i > 1:
	for l in range(len(norm_modes)):
		for j in range(mol_size):
			index = norm_modes[l]+j
			motions.append(lines[index])
		motions.append('\n')
	for l in range(mol_size):
			index = input_orientations[-1]+l+4
			geom.append(lines[index])		
	for l in range(mol_size):	
		index = mullikenindex + l + 1
		mulliken.append(lines[index])

f1 = open(outFile,'a')
f1.write('\nNormal Modes:\n')
f1.writelines(['%s' % item for item in motions])
f1.write('Geometry:\n')
f1.writelines(['%s' % item for item in geom])
f1.write('\n\n\n')

# -------------------------- MOBCAL INPUT! -------------------------- #
f1.write('MOBCAL INPUT:\n\n')
shortfilename = inFile.replace(".log","")
f1.write(str(shortfilename))
f1.write('.mfj\n1\n')
f1.write(str(mol_size))
f1.write('\nang\ncalc\n1.0000\n')

geom1 = []
mulliken1 = []
for i in range(len(geom)):
	test = geom[i]
	Test = mulliken[i]
	j = i+1
	string1 = '      %d         ' % j
	String1 = '     %d  ' % j
	test1 = test.replace(str(string1),"")
	Test1 = Test.replace(str(String1),"")
	geom1.append(test1) 
	mulliken1.append(Test1)
# stripping down the geom array to have the correct format 

geom2 = []
for i in range(len(geom)):
	test = geom1[i]
	test1 = test[:2]
	geom2.append(test1)
# making a copy that is only the first 2 values of the shortened geom
# array. Used for the if statements below to get MOBCAL's formatting

#print geom2

for i in range(len(geom)):
	test = geom1[i]
	Test = mulliken1[i]
# Hydrogen
	if geom2[i] == ' 1':
		test1 = test.replace(' 1           0       ', "\t")
		length = len(test1)-2
		Test1 = Test.replace('H   ',"")
		geom1[i] = test1[:length] + str('  1\t') + Test1	
# Carbon
	if geom2[i] == ' 6':
		test1 = test.replace(' 6           0       ', "\t")
		length = len(test1)-2
		Test1 = Test.replace('C   ',"")
		geom1[i] = test1[:length] + str(' 12\t') + Test1
# Nitrogen
	if geom2[i] == ' 7':
		test1 = test.replace(' 7           0       ', "\t")
		length = len(test1)-2
		Test1 = Test.replace('N   ',"")
		geom1[i] = test1[:length] + str(' 14\t') + Test1
# Oxygen
	if geom2[i] == ' 8':
		test1 = test.replace(' 8           0       ', "\t")
		length = len(test1)-2
		Test1 = Test.replace('O   ',"")
		geom1[i] = test1[:length] + str(' 16\t') + Test1
# Sodium
	if geom2[i] == '11':
		test1 = test.replace('11           0       ', "\t")
		length = len(test1)-2
		Test1 = Test.replace('Na  ',"")
		geom1[i] = test1[:length] + str(' 23\t') + Test1		
# Silicon
	if geom2[i] == '14':
		test1 = test.replace('14           0       ', "\t")
		length = len(test1)-2
		Test1 = Test.replace('Si  ',"")
		geom1[i] = test1[:length] + str(' 28\t') + Test1
# Sulfur
	if geom2[i] == '16':
		test1 = test.replace('16           0       ', "\t")
		length = len(test1)-2
		Test1 = Test.replace('S   ',"")
		geom1[i] = test1[:length] + str(' 32\t') + Test1
# Titanium
	if geom2[i] == '22':
		test1 = test.replace('22           0       ', "\t")
		length = len(test1)-2
		Test1 = Test.replace('Ti  ',"")
		geom1[i] = test1[:length] + str(' 48\t') + Test1
# Iron
	if geom2[i] == '26':
		test1 = test.replace('26           0       ', "\t")
		length = len(test1)-2
		Test1 = Test.replace('Fe  ',"")
		geom1[i] = test1[:length] + str(' 56\t') + Test1

# NOTES:
# the spaces in the Test1 lines are one shorter after elements with 2 letters
# Similarly, they are no spaces in front of atomic numbers with 2 digits


# This has not currently been run on MOBCAL to test formatting, but it looks close by eye



f1.writelines(['%s' % item for item in geom1])
# will need to incorporate other atoms as we include more in MOBCAL
