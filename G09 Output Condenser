# ------------------------------ NOTES ------------------------------ #
#
# This was built to analyze and condense the output of Gaussian
# 09 usng DFT to do an opt+freq calculation. #
#
#
# Input: python G09_Output_Condenser.py input_name output_name
# 
# Output: a text file (or .whatever you specify) formatted as follows:
# ====================================================================
# ====================================================================
#                    This section is for [input filename]
#                           Success		TRUE/FALSE
# ====================================================================
# ====================================================================
#
#  Either: error code & last optimization step number
#  OR:     energy, frequency, and normal modes calculated
#
# ------------------------------ START ------------------------------ #
import sys

inFile = sys.argv[1]
outFile = sys.argv[2]
f = open(inFile,'r')
# takes input from the user to select file from terminal and opens file
f1 = open(outFile,'a')
f1.write('===============================================================================\n===============================================================================\n   		      This section is for ')
f1.write(str(inFile))

i = 0 
j = 0
freq = []
errorlines = []
for line in f:
	if 'Step number' in line:
		steps = line
	if 'SCF Done:' in line:
		energy = line
	if ' Frequencies --' in line:
		freq.append(line)
	if 'Error termination' in line:
		j = j+1
		errorlines.append(line)
		if j == 1:
			f1.write('\n				Success:	FALSE\n')
			f1.write('===============================================================================\n===============================================================================\n\n')
			f1.write(str(errorlines[0]))
			f1.write(str(steps))
		if j > 1:
			f1.write('\n				Success:	FALSE\n')
			f1.write('===============================================================================\n===============================================================================\n\n')
			f1.write(str(errorlines[1]))
			f1.write(str(steps))
	if 'Normal termination' in line:
		i = i+1
	if i > 1:		
		f1.write('\n				Success:	TRUE\n')
		f1.write('===============================================================================\n===============================================================================\n\n')
		f1.write(str(energy))
		f1.writelines(['%s' % item for item in freq])
# opens/searches the file for a number of useful things and writes to
# the desired output accordingly, except normal modes (see below)

f = open(inFile,'r')
lines = f.readlines()
norm_modes = []
mol_size = []
motions = []
with open(inFile) as myFile:
	for num, line in enumerate(myFile, 1):
		if '  Atom  AN ' in line:
			norm_modes.append(num)
		if ' Symbolic Z-Matrix:' in line:
			mol_size.append(num)
		if ' Initialization pass' in line:
			mol_size.append(num)
	mol_size = mol_size[1] - mol_size[0] - 5
# this calculates, correctly, the molecule size by taking some of the 
# keywords used in the Gaussin input and subtracting their difference
# the 5 is used to account for blank spaces, etc. in the file

if i > 1:
	for l in range(len(norm_modes)):
		for j in range(mol_size):
			index = norm_modes[l]+j
			motions.append(lines[index])
		motions.append('\n')
f1 = open(outFile,'a')
f1.write('\n')
f1.writelines(['%s' % item for item in motions])
f1.write('\n\n')
